{"version":3,"sources":["block.js"],"names":["Emitter","require","colors","cc","Class","extends","Component","properties","labelNum","default","type","Label","background","Node","onLoad","instance","emit","setLabel","label","string","node","color","appear","actions","scaleTo","runAction","sequence","merge"],"mappings":";;;;;;AAAA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA;;AAEAE,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAU;AACNC,qBAAS,IADH;AAENC,kBAAMP,GAAGQ;AAFH,SADF;AAKRC,oBAAY;AACRH,qBAAS,IADD;AAERC,kBAAMP,GAAGU;AAFD;AALJ,KAHP;AAaLC,UAbK,oBAaI;AACLd,gBAAQe,QAAR,CAAiBC,IAAjB,CAAsB,YAAtB,EAAoC,IAApC;AACH,KAfI;AAgBLC,YAhBK,oBAgBIC,KAhBJ,EAgBW;AACZ,YAAIA,SAAS,CAAb,EAAgB;AACZ,iBAAKV,QAAL,CAAcW,MAAd,GAAuB,EAAvB;AACH,SAFD,MAEO;AACH,iBAAKX,QAAL,CAAcW,MAAd,GAAuBD,KAAvB;AACH;AACD,aAAKE,IAAL,CAAUC,KAAV,GAAkBnB,OAAOgB,KAAP,CAAlB;AACA,eAAO,CAAP;AACH,KAxBI;AAyBLI,UAzBK,oBAyBI;AACL,YAAIC,UAAU,CAAEpB,GAAGqB,OAAH,CAAW,CAAX,EAAc,CAAd,CAAF,EACErB,GAAGqB,OAAH,CAAW,IAAX,EAAgB,CAAhB,CADF,CAAd;AAEA,aAAKJ,IAAL,CAAUK,SAAV,CAAoBtB,GAAGuB,QAAH,CAAYH,OAAZ,CAApB;AACH,KA7BI;AA8BLI,SA9BK,mBA8BG;AACJ,YAAIJ,UAAU,CAAEpB,GAAGqB,OAAH,CAAW,IAAX,EAAiB,GAAjB,CAAF,EACErB,GAAGqB,OAAH,CAAW,IAAX,EAAiB,CAAjB,CADF,CAAd;AAGA,aAAKJ,IAAL,CAAUK,SAAV,CAAoBtB,GAAGuB,QAAH,CAAYH,OAAZ,CAApB;AACH;AAnCI,CAAT","file":"block.js","sourceRoot":"../../../../assets/Script","sourcesContent":["const Emitter = require('mEmitter');\r\nlet colors = require(\"colors\");\r\n// const colors = require('colors')\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        labelNum: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        background: {\r\n            default: null,\r\n            type: cc.Node\r\n        }\r\n    },\r\n    onLoad() {\r\n        Emitter.instance.emit('transBlock', this);\r\n    },\r\n    setLabel(label) {\r\n        if (label == 0) {\r\n            this.labelNum.string = \"\"\r\n        } else {\r\n            this.labelNum.string = label \r\n        }\r\n        this.node.color = colors[label];\r\n        return 1\r\n    },\r\n    appear() {\r\n        let actions = [ cc.scaleTo(0, 0),\r\n                        cc.scaleTo(0.05,1)]\r\n        this.node.runAction(cc.sequence(actions))\r\n    },\r\n    merge() {\r\n        let actions = [ cc.scaleTo(0.05, 1.3),\r\n                        cc.scaleTo(0.05, 1),\r\n                        ]\r\n        this.node.runAction(cc.sequence(actions))\r\n    },\r\n});\r\n"]}